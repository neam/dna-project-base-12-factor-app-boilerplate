# Docker compose configuration for docker-cloud deployment router (to run on publicly facing instances on port 80/443 where DNS records are pointed at)
# This service has a single purpose: Mapping a virtual host request to corresponding services deployed in an elastic instance cluster.
# Getting started:
#  1. Launch two separate instances and make sure they have stable IP addresses (in AWS, use elastic ips)
#  2. Add the instances as docker-cloud using the Bring-Your-Own-Node method (https://support.tutum.co/support/solutions/articles/5000513678-bring-your-own-node)
#  3. Tag one of them "public-dev" and the other "public-prod"
#  4. Launch one router-stack/service on each, resulting in the stacks/services routerprod and routerdev.
# Production DNS entries are then mapped to the instance where routerprod is running, and development entries to the other one.

%DEPLOY_STABILITY_TAG%-router:
  image: dockercloud/haproxy:1.4.2
  links:
    - %STACK_WEB_SERVICE_NAME_1%
    - %STACK_WEB_SERVICE_NAME_2%
    - %STACK_WEB_SERVICE_NAME_3%
    - %STACK_WEB_SERVICE_NAME_etc%
  ports:
    - "80:80"
    - "443:443"
    - "1936:1936"
  environment:
    # Clarify the timeout setting, making it easy to adjust
    TIMEOUT: connect 5000, client 120000, server 120000
    # Set 100k instead of default 4096 since we have experienced 7-20k simultaneous connections during high load (and even a t2.small instance handles way more than 4096 simultaneous connections)
    MAXCONN: 100000
    # Some sort of protection for the stats endpoint (needless to say, you should use a unique secure password in production)
    STATS_AUTH: stats:n3v3rg0nnAg1v3y0uup
    # Set to papertrailapp destination (or logstash/other service)
    RSYSLOG_DESTINATION: logs2.papertrailapp.com:55555
  # Set cluster deploy tags to ensure this container is launched inside a cluster and not on a publicly facing node
  tags:
    - %DEPLOY_STABILITY_TAG%-router
  # Auto-restart in case container is stopped unexpectedly
  restart: always
  # Do not update the service when a new version is pushed to the registry (since we want finer control of when new configuration is applied)
  autoredeploy: false
  # Container distribution among nodes (so that we easily can add more public nodes elastically)
  deployment_strategy: every_node
  # Enable full Tutum API access so that the container can reconfigure itself
  roles:
      - global
